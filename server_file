int i, ack_count = 0, ack_track[100], window_track = 0, start = 0;

while(n > 0 && last_packet_received == 0)
	{
		for(i = 0; i < recv_packet.window_size; i++)
		{
		   n = Recv(sockfd, &recv_packet, sizeof(recv_packet), 0);
		
		   if(ack_track[recv_packet.seq] == 1)
		   {
		     printf("%s\n", "Duplicate Packet");
		     continue;
		   }
		
		
		   if(ack_track[recv_packet.seq - 1] == -1 && window_track == 1)
		     {
		       printf("%s\n", "Discard the packet because the previous packet was lost");
		       continue;
		     }
		     
		   probability = (rand()%10)*0.1;
		   if(probability > cdata.probability)
		   {
		    printf("%s\n", "Discard the packet due to probability threshold violation");
		    window_track = 1;
		    continue;
                   }
                   
		//printf("%s", recv_packet.data_buffer);
		//printf("\n>>>>>>>>>>>>>>> Seq number of the received packet = %d <<<<<<<<<<<<<<<<<<<<<\n", recv_packet.seq);
		//printf("\n>>>>>>>>>>>>>>> Size of the received packet = %d <<<<<<<<<<<<<<<<<<<<<\n", n);
		
		add_packet_to_buffer(&recv_packet);
		ack_track[recv_packet.seq] = 1;
		ack_count++;
               }
               
        	window_track = 0;
        	for(i = start; i < ack_count; i++)
        	{
		// Send ACK to the server
		send_packet.seq = i;
		send_packet.last_flag = recv_packet.last_flag;
		send_packet.window_size = current_window_size;
		send_packet.ack = i + 1;

		Send(sockfd, &send_packet, sizeof(send_packet), flags);
                }
                
                start = ack_count;
                
		if(recv_packet.last_flag == 1)
		{
			//printf("\n[INFO]Last flag set\n");
			//break;		
		} 
	}
int i, ack_count = 0, ack_track[100], window_track = 0, start = 0;

while(n > 0 && last_packet_received == 0)
	{
		for(i = 0; i < recv_packet.window_size; i++)
		{
		   n = Recv(sockfd, &recv_packet, sizeof(recv_packet), 0);
		
		   if(ack_track[recv_packet.seq] == 1)
		   {
		     printf("%s\n", "Duplicate Packet");
		     continue;
		   }
		
		
		   if(ack_track[recv_packet.seq - 1] == -1 && window_track == 1)
		     {
		       printf("%s\n", "Discard the packet because the previous packet was lost");
		       continue;
		     }
		     
		   probability = (rand()%10)*0.1;
		   if(probability > cdata.probability)
		   {
		    printf("%s\n", "Discard the packet due to probability threshold violation");
		    window_track = 1;
		    continue;
                   }
                   
		//printf("%s", recv_packet.data_buffer);
		//printf("\n>>>>>>>>>>>>>>> Seq number of the received packet = %d <<<<<<<<<<<<<<<<<<<<<\n", recv_packet.seq);
		//printf("\n>>>>>>>>>>>>>>> Size of the received packet = %d <<<<<<<<<<<<<<<<<<<<<\n", n);
		
		add_packet_to_buffer(&recv_packet);
		ack_track[recv_packet.seq] = 1;
		ack_count++;
               }
               
        	window_track = 0;
        	for(i = start; i < ack_count; i++)
        	{
		// Send ACK to the server
		send_packet.seq = i;
		send_packet.last_flag = recv_packet.last_flag;
		send_packet.window_size = current_window_size;
		send_packet.ack = i + 1;

		Send(sockfd, &send_packet, sizeof(send_packet), flags);
                }
                
                start = ack_count;
                
		if(recv_packet.last_flag == 1)
		{
			//printf("\n[INFO]Last flag set\n");
			//break;		
		} 
	}int i, ack_count = 0, ack_track[100], window_track = 0, start = 0;

while(n > 0 && last_packet_received == 0)
	{
		for(i = 0; i < recv_packet.window_size; i++)
		{
		   n = Recv(sockfd, &recv_packet, sizeof(recv_packet), 0);
		
		   if(ack_track[recv_packet.seq] == 1)
		   {
		     printf("%s\n", "Duplicate Packet");
		     continue;
		   }
		
		
		   if(ack_track[recv_packet.seq - 1] == -1 && window_track == 1)
		     {
		       printf("%s\n", "Discard the packet because the previous packet was lost");
		       continue;
		     }
		     
		   probability = (rand()%10)*0.1;
		   if(probability > cdata.probability)
		   {
		    printf("%s\n", "Discard the packet due to probability threshold violation");
		    window_track = 1;
		    continue;
                   }
                   
		//printf("%s", recv_packet.data_buffer);
		//printf("\n>>>>>>>>>>>>>>> Seq number of the received packet = %d <<<<<<<<<<<<<<<<<<<<<\n", recv_packet.seq);
		//printf("\n>>>>>>>>>>>>>>> Size of the received packet = %d <<<<<<<<<<<<<<<<<<<<<\n", n);
		
		add_packet_to_buffer(&recv_packet);
		ack_track[recv_packet.seq] = 1;
		ack_count++;
               }
               
        	window_track = 0;
        	for(i = start; i < ack_count; i++)
        	{
		// Send ACK to the server
		send_packet.seq = i;
		send_packet.last_flag = recv_packet.last_flag;
		send_packet.window_size = current_window_size;
		send_packet.ack = i + 1;

		Send(sockfd, &send_packet, sizeof(send_packet), flags);
                }
                
                start = ack_count;
                
		if(recv_packet.last_flag == 1)
		{
			//printf("\n[INFO]Last flag set\n");
			//break;		
		} 
	}int i, ack_count = 0, ack_track[100], window_track = 0, start = 0;

while(n > 0 && last_packet_received == 0)
	{
		for(i = 0; i < recv_packet.window_size; i++)
		{
		   n = Recv(sockfd, &recv_packet, sizeof(recv_packet), 0);
		
		   if(ack_track[recv_packet.seq] == 1)
		   {
		     printf("%s\n", "Duplicate Packet");
		     continue;
		   }
		
		
		   if(ack_track[recv_packet.seq - 1] == -1 && window_track == 1)
		     {
		       printf("%s\n", "Discard the packet because the previous packet was lost");
		       continue;
		     }
		     
		   probability = (rand()%10)*0.1;
		   if(probability > cdata.probability)
		   {
		    printf("%s\n", "Discard the packet due to probability threshold violation");
		    window_track = 1;
		    continue;
                   }
                   
		//printf("%s", recv_packet.data_buffer);
		//printf("\n>>>>>>>>>>>>>>> Seq number of the received packet = %d <<<<<<<<<<<<<<<<<<<<<\n", recv_packet.seq);
		//printf("\n>>>>>>>>>>>>>>> Size of the received packet = %d <<<<<<<<<<<<<<<<<<<<<\n", n);
		
		add_packet_to_buffer(&recv_packet);
		ack_track[recv_packet.seq] = 1;
		ack_count++;
               }
               
        	window_track = 0;
        	for(i = start; i < ack_count; i++)
        	{
		// Send ACK to the server
		send_packet.seq = i;
		send_packet.last_flag = recv_packet.last_flag;
		send_packet.window_size = current_window_size;
		send_packet.ack = i + 1;

		Send(sockfd, &send_packet, sizeof(send_packet), flags);
                }
                
                start = ack_count;
                
		if(recv_packet.last_flag == 1)
		{
			//printf("\n[INFO]Last flag set\n");
			//break;		
		} 
	}int i, ack_count = 0, ack_track[100], window_track = 0, start = 0;

while(n > 0 && last_packet_received == 0)
	{
		for(i = 0; i < recv_packet.window_size; i++)
		{
		   n = Recv(sockfd, &recv_packet, sizeof(recv_packet), 0);
		
		   if(ack_track[recv_packet.seq] == 1)
		   {
		     printf("%s\n", "Duplicate Packet");
		     continue;
		   }
		
		
		   if(ack_track[recv_packet.seq - 1] == -1 && window_track == 1)
		     {
		       printf("%s\n", "Discard the packet because the previous packet was lost");
		       continue;
		     }
		     
		   probability = (rand()%10)*0.1;
		   if(probability > cdata.probability)
		   {
		    printf("%s\n", "Discard the packet due to probability threshold violation");
		    window_track = 1;
		    continue;
                   }
                   
		//printf("%s", recv_packet.data_buffer);
		//printf("\n>>>>>>>>>>>>>>> Seq number of the received packet = %d <<<<<<<<<<<<<<<<<<<<<\n", recv_packet.seq);
		//printf("\n>>>>>>>>>>>>>>> Size of the received packet = %d <<<<<<<<<<<<<<<<<<<<<\n", n);
		
		add_packet_to_buffer(&recv_packet);
		ack_track[recv_packet.seq] = 1;
		ack_count++;
               }
               
        	window_track = 0;
        	for(i = start; i < ack_count; i++)
        	{
		// Send ACK to the server
		send_packet.seq = i;
		send_packet.last_flag = recv_packet.last_flag;
		send_packet.window_size = current_window_size;
		send_packet.ack = i + 1;

		Send(sockfd, &send_packet, sizeof(send_packet), flags);
                }
                
                start = ack_count;
                
		if(recv_packet.last_flag == 1)
		{
			//printf("\n[INFO]Last flag set\n");
			//break;		
		} 
	}int i, ack_count = 0, ack_track[100], window_track = 0, start = 0;

while(n > 0 && last_packet_received == 0)
	{
		for(i = 0; i < recv_packet.window_size; i++)
		{
		   n = Recv(sockfd, &recv_packet, sizeof(recv_packet), 0);
		
		   if(ack_track[recv_packet.seq] == 1)
		   {
		     printf("%s\n", "Duplicate Packet");
		     continue;
		   }
		
		
		   if(ack_track[recv_packet.seq - 1] == -1 && window_track == 1)
		     {
		       printf("%s\n", "Discard the packet because the previous packet was lost");
		       continue;
		     }
		     
		   probability = (rand()%10)*0.1;
		   if(probability > cdata.probability)
		   {
		    printf("%s\n", "Discard the packet due to probability threshold violation");
		    window_track = 1;
		    continue;
                   }
                   
		//printf("%s", recv_packet.data_buffer);
		//printf("\n>>>>>>>>>>>>>>> Seq number of the received packet = %d <<<<<<<<<<<<<<<<<<<<<\n", recv_packet.seq);
		//printf("\n>>>>>>>>>>>>>>> Size of the received packet = %d <<<<<<<<<<<<<<<<<<<<<\n", n);
		
		add_packet_to_buffer(&recv_packet);
		ack_track[recv_packet.seq] = 1;
		ack_count++;
               }
               
        	window_track = 0;
        	for(i = start; i < ack_count; i++)
        	{
		// Send ACK to the server
		send_packet.seq = i;
		send_packet.last_flag = recv_packet.last_flag;
		send_packet.window_size = current_window_size;
		send_packet.ack = i + 1;

		Send(sockfd, &send_packet, sizeof(send_packet), flags);
                }
                
                start = ack_count;
                
		if(recv_packet.last_flag == 1)
		{
			//printf("\n[INFO]Last flag set\n");
			//break;		
		} 
	}int i, ack_count = 0, ack_track[100], window_track = 0, start = 0;

while(n > 0 && last_packet_received == 0)
	{
		for(i = 0; i < recv_packet.window_size; i++)
		{
		   n = Recv(sockfd, &recv_packet, sizeof(recv_packet), 0);
		
		   if(ack_track[recv_packet.seq] == 1)
		   {
		     printf("%s\n", "Duplicate Packet");
		     continue;
		   }
		
		
		   if(ack_track[recv_packet.seq - 1] == -1 && window_track == 1)
		     {
		       printf("%s\n", "Discard the packet because the previous packet was lost");
		       continue;
		     }
		     
		   probability = (rand()%10)*0.1;
		   if(probability > cdata.probability)
		   {
		    printf("%s\n", "Discard the packet due to probability threshold violation");
		    window_track = 1;
		    continue;
                   }
                   
		//printf("%s", recv_packet.data_buffer);
		//printf("\n>>>>>>>>>>>>>>> Seq number of the received packet = %d <<<<<<<<<<<<<<<<<<<<<\n", recv_packet.seq);
		//printf("\n>>>>>>>>>>>>>>> Size of the received packet = %d <<<<<<<<<<<<<<<<<<<<<\n", n);
		
		add_packet_to_buffer(&recv_packet);
		ack_track[recv_packet.seq] = 1;
		ack_count++;
               }
               
        	window_track = 0;
        	for(i = start; i < ack_count; i++)
        	{
		// Send ACK to the server
		send_packet.seq = i;
		send_packet.last_flag = recv_packet.last_flag;
		send_packet.window_size = current_window_size;
		send_packet.ack = i + 1;

		Send(sockfd, &send_packet, sizeof(send_packet), flags);
                }
                
                start = ack_count;
                
		if(recv_packet.last_flag == 1)
		{
			//printf("\n[INFO]Last flag set\n");
			//break;		
		} 
	}int i, ack_count = 0, ack_track[100], window_track = 0, start = 0;

while(n > 0 && last_packet_received == 0)
	{
		for(i = 0; i < recv_packet.window_size; i++)
		{
		   n = Recv(sockfd, &recv_packet, sizeof(recv_packet), 0);
		
		   if(ack_track[recv_packet.seq] == 1)
		   {
		     printf("%s\n", "Duplicate Packet");
		     continue;
		   }
		
		
		   if(ack_track[recv_packet.seq - 1] == -1 && window_track == 1)
		     {
		       printf("%s\n", "Discard the packet because the previous packet was lost");
		       continue;
		     }
		     
		   probability = (rand()%10)*0.1;
		   if(probability > cdata.probability)
		   {
		    printf("%s\n", "Discard the packet due to probability threshold violation");
		    window_track = 1;
		    continue;
                   }
                   
		//printf("%s", recv_packet.data_buffer);
		//printf("\n>>>>>>>>>>>>>>> Seq number of the received packet = %d <<<<<<<<<<<<<<<<<<<<<\n", recv_packet.seq);
		//printf("\n>>>>>>>>>>>>>>> Size of the received packet = %d <<<<<<<<<<<<<<<<<<<<<\n", n);
		
		add_packet_to_buffer(&recv_packet);
		ack_track[recv_packet.seq] = 1;
		ack_count++;
               }
               
        	window_track = 0;
        	for(i = start; i < ack_count; i++)
        	{
		// Send ACK to the server
		send_packet.seq = i;
		send_packet.last_flag = recv_packet.last_flag;
		send_packet.window_size = current_window_size;
		send_packet.ack = i + 1;

		Send(sockfd, &send_packet, sizeof(send_packet), flags);
                }
                
                start = ack_count;
                
		if(recv_packet.last_flag == 1)
		{
			//printf("\n[INFO]Last flag set\n");
			//break;		
		} 
	}int i, ack_count = 0, ack_track[100], window_track = 0, start = 0;

while(n > 0 && last_packet_received == 0)
	{
		for(i = 0; i < recv_packet.window_size; i++)
		{
		   n = Recv(sockfd, &recv_packet, sizeof(recv_packet), 0);
		
		   if(ack_track[recv_packet.seq] == 1)
		   {
		     printf("%s\n", "Duplicate Packet");
		     continue;
		   }
		
		
		   if(ack_track[recv_packet.seq - 1] == -1 && window_track == 1)
		     {
		       printf("%s\n", "Discard the packet because the previous packet was lost");
		       continue;
		     }
		     
		   probability = (rand()%10)*0.1;
		   if(probability > cdata.probability)
		   {
		    printf("%s\n", "Discard the packet due to probability threshold violation");
		    window_track = 1;
		    continue;
                   }
                   
		//printf("%s", recv_packet.data_buffer);
		//printf("\n>>>>>>>>>>>>>>> Seq number of the received packet = %d <<<<<<<<<<<<<<<<<<<<<\n", recv_packet.seq);
		//printf("\n>>>>>>>>>>>>>>> Size of the received packet = %d <<<<<<<<<<<<<<<<<<<<<\n", n);
		
		add_packet_to_buffer(&recv_packet);
		ack_track[recv_packet.seq] = 1;
		ack_count++;
               }
               
        	window_track = 0;
        	for(i = start; i < ack_count; i++)
        	{
		// Send ACK to the server
		send_packet.seq = i;
		send_packet.last_flag = recv_packet.last_flag;
		send_packet.window_size = current_window_size;
		send_packet.ack = i + 1;

		Send(sockfd, &send_packet, sizeof(send_packet), flags);
                }
                
                start = ack_count;
                
		if(recv_packet.last_flag == 1)
		{
			//printf("\n[INFO]Last flag set\n");
			//break;		
		} 
	}int i, ack_count = 0, ack_track[100], window_track = 0, start = 0;

while(n > 0 && last_packet_received == 0)
	{
		for(i = 0; i < recv_packet.window_size; i++)
		{
		   n = Recv(sockfd, &recv_packet, sizeof(recv_packet), 0);
		
		   if(ack_track[recv_packet.seq] == 1)
		   {
		     printf("%s\n", "Duplicate Packet");
		     continue;
		   }
		
		
		   if(ack_track[recv_packet.seq - 1] == -1 && window_track == 1)
		     {
		       printf("%s\n", "Discard the packet because the previous packet was lost");
		       continue;
		     }
		     
		   probability = (rand()%10)*0.1;
		   if(probability > cdata.probability)
		   {
		    printf("%s\n", "Discard the packet due to probability threshold violation");
		    window_track = 1;
		    continue;
                   }
                   
		//printf("%s", recv_packet.data_buffer);
		//printf("\n>>>>>>>>>>>>>>> Seq number of the received packet = %d <<<<<<<<<<<<<<<<<<<<<\n", recv_packet.seq);
		//printf("\n>>>>>>>>>>>>>>> Size of the received packet = %d <<<<<<<<<<<<<<<<<<<<<\n", n);
		
		add_packet_to_buffer(&recv_packet);
		ack_track[recv_packet.seq] = 1;
		ack_count++;
               }
               
        	window_track = 0;
        	for(i = start; i < ack_count; i++)
        	{
		// Send ACK to the server
		send_packet.seq = i;
		send_packet.last_flag = recv_packet.last_flag;
		send_packet.window_size = current_window_size;
		send_packet.ack = i + 1;

		Send(sockfd, &send_packet, sizeof(send_packet), flags);
                }
                
                start = ack_count;
                
		if(recv_packet.last_flag == 1)
		{
			//printf("\n[INFO]Last flag set\n");
			//break;		
		} 
	}int i, ack_count = 0, ack_track[100], window_track = 0, start = 0;

while(n > 0 && last_packet_received == 0)
	{
		for(i = 0; i < recv_packet.window_size; i++)
		{
		   n = Recv(sockfd, &recv_packet, sizeof(recv_packet), 0);
		
		   if(ack_track[recv_packet.seq] == 1)
		   {
		     printf("%s\n", "Duplicate Packet");
		     continue;
		   }
		
		
		   if(ack_track[recv_packet.seq - 1] == -1 && window_track == 1)
		     {
		       printf("%s\n", "Discard the packet because the previous packet was lost");
		       continue;
		     }
		     
		   probability = (rand()%10)*0.1;
		   if(probability > cdata.probability)
		   {
		    printf("%s\n", "Discard the packet due to probability threshold violation");
		    window_track = 1;
		    continue;
                   }
                   
		//printf("%s", recv_packet.data_buffer);
		//printf("\n>>>>>>>>>>>>>>> Seq number of the received packet = %d <<<<<<<<<<<<<<<<<<<<<\n", recv_packet.seq);
		//printf("\n>>>>>>>>>>>>>>> Size of the received packet = %d <<<<<<<<<<<<<<<<<<<<<\n", n);
		
		add_packet_to_buffer(&recv_packet);
		ack_track[recv_packet.seq] = 1;
		ack_count++;
               }
               
        	window_track = 0;
        	for(i = start; i < ack_count; i++)
        	{
		// Send ACK to the server
		send_packet.seq = i;
		send_packet.last_flag = recv_packet.last_flag;
		send_packet.window_size = current_window_size;
		send_packet.ack = i + 1;

		Send(sockfd, &send_packet, sizeof(send_packet), flags);
                }
                
                start = ack_count;
                
		if(recv_packet.last_flag == 1)
		{
			//printf("\n[INFO]Last flag set\n");
			//break;		
		} 
	}int i, ack_count = 0, ack_track[100], window_track = 0, start = 0;

while(n > 0 && last_packet_received == 0)
	{
		for(i = 0; i < recv_packet.window_size; i++)
		{
		   n = Recv(sockfd, &recv_packet, sizeof(recv_packet), 0);
		
		   if(ack_track[recv_packet.seq] == 1)
		   {
		     printf("%s\n", "Duplicate Packet");
		     continue;
		   }
		
		
		   if(ack_track[recv_packet.seq - 1] == -1 && window_track == 1)
		     {
		       printf("%s\n", "Discard the packet because the previous packet was lost");
		       continue;
		     }
		     
		   probability = (rand()%10)*0.1;
		   if(probability > cdata.probability)
		   {
		    printf("%s\n", "Discard the packet due to probability threshold violation");
		    window_track = 1;
		    continue;
                   }
                   
		//printf("%s", recv_packet.data_buffer);
		//printf("\n>>>>>>>>>>>>>>> Seq number of the received packet = %d <<<<<<<<<<<<<<<<<<<<<\n", recv_packet.seq);
		//printf("\n>>>>>>>>>>>>>>> Size of the received packet = %d <<<<<<<<<<<<<<<<<<<<<\n", n);
		
		add_packet_to_buffer(&recv_packet);
		ack_track[recv_packet.seq] = 1;
		ack_count++;
               }
               
        	window_track = 0;
        	for(i = start; i < ack_count; i++)
        	{
		// Send ACK to the server
		send_packet.seq = i;
		send_packet.last_flag = recv_packet.last_flag;
		send_packet.window_size = current_window_size;
		send_packet.ack = i + 1;

		Send(sockfd, &send_packet, sizeof(send_packet), flags);
                }
                
                start = ack_count;
                
		if(recv_packet.last_flag == 1)
		{
			//printf("\n[INFO]Last flag set\n");
			//break;		
		} 
	}
